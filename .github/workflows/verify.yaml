name: Verify

on:
  push:
    branches:
      - main
  pull_request:

env:
  XCODE_VERSION: '15.0.1'

jobs:
  build:
    runs-on: macOS-13
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup XCode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
      - name: Set Github credentials for SPM
        run: |
          cat << EOF >> ~/.netrc
          machine github.com
          login $GITHUB_USERNAME
          password $GITHUB_TOKEN

          machine api.github.com
          login $GITHUB_USERNAME
          password $GITHUB_TOKEN

          machine maven.pkg.github.com
          login $GITHUB_USERNAME
          password $GITHUB_TOKEN
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
          GITHUB_USERNAME: ${{ github.actor }}
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
